// app.js
import Fuse from 'https://cdn.jsdelivr.net/npm/fuse.js@6.6.2/dist/fuse.esm.js';

// Persistent storage (session-based)
const storageKey = 'arch-collections';
let collectedData = JSON.parse(localStorage.getItem(storageKey)) || {};

// Configure fuzzy search
const fuseOptions = {
  keys: ['name'],
  threshold: 0.3
};
const artifactFuse = new Fuse(Object.values(collections).flatMap(c => 
  Object.entries(c.collections).flatMap(([name, arts]) => 
    arts.map(a => ({name: a, collection: name}))
), fuseOptions);

// Enhanced scanner
async function scanCollections() {
  if (!alt1.overlayLockscreen()) return;

  try {
    const win = alt1.getActiveWindow();
    if (!win?.title.includes("Archaeology Collector")) return;

    const collector = getCollectorName(win);
    const collections = await detectArtifacts(win);
    
    // Update storage
    collectedData[collector] = collections;
    localStorage.setItem(storageKey, JSON.stringify(collectedData));
    
    updateUI();

  } finally {
    alt1.overlayUnlockscreen();
  }
}

async function detectArtifacts(win) {
  const results = [];
  const positions = [
    {nameRect: [50, 120, 300, 30], countRect: [350, 120, 100, 30]},
    {nameRect: [50, 160, 300, 30], countRect: [350, 160, 100, 30]},
    // Add more positions as needed
  ];

  for (const pos of positions) {
    const name = alt1.getRegionText(win, pos.nameRect).trim();
    const countText = alt1.getRegionText(win, pos.countRect);
    const match = countText.match(/(\d+)\/(\d+)/);
    
    if (name && match) {
      const artifact = artifactFuse.search(name)[0]?.item;
      if (artifact) {
        results.push({
          name: artifact.name,
          collected: parseInt(match[1]),
          required: parseInt(match[2])
        });
      }
    }
  }
  return results;
}

// Updated UI with storage
function updateUI() {
  const container = document.getElementById("collector-list");
  container.innerHTML = "";

  for (const [collector, collections] of Object.entries(collectedData)) {
    const card = document.createElement("div");
    card.className = "collector-card";
    
    card.innerHTML = `
      <h2 class="collector-name">${collector}</h2>
      ${collections.map(c => `
        <div class="collection-item">
          <span>${c.name}</span>
          <span class="progress-text">${c.collected}/${c.required}</span>
        </div>
      `).join("")}
    `;
    
    container.appendChild(card);
  }
}

// Add reset button
document.getElementById("reset-btn").addEventListener("click", () => {
  localStorage.removeItem(storageKey);
  collectedData = {};
  updateUI();
});